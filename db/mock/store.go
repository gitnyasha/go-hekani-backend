// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gitnyasha/go-hekani-backend/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/gitnyasha/go-hekani-backend/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAnswer mocks base method.
func (m *MockStore) CreateAnswer(arg0 context.Context, arg1 db.CreateAnswerParams) (db.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnswer", arg0, arg1)
	ret0, _ := ret[0].(db.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnswer indicates an expected call of CreateAnswer.
func (mr *MockStoreMockRecorder) CreateAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnswer", reflect.TypeOf((*MockStore)(nil).CreateAnswer), arg0, arg1)
}

// CreateArticle mocks base method.
func (m *MockStore) CreateArticle(arg0 context.Context, arg1 db.CreateArticleParams) (db.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", arg0, arg1)
	ret0, _ := ret[0].(db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockStoreMockRecorder) CreateArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockStore)(nil).CreateArticle), arg0, arg1)
}

// CreateArticleCategory mocks base method.
func (m *MockStore) CreateArticleCategory(arg0 context.Context, arg1 string) (db.ArticleCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticleCategory", arg0, arg1)
	ret0, _ := ret[0].(db.ArticleCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticleCategory indicates an expected call of CreateArticleCategory.
func (mr *MockStoreMockRecorder) CreateArticleCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticleCategory", reflect.TypeOf((*MockStore)(nil).CreateArticleCategory), arg0, arg1)
}

// CreateComment mocks base method.
func (m *MockStore) CreateComment(arg0 context.Context, arg1 db.CreateCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockStoreMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockStore)(nil).CreateComment), arg0, arg1)
}

// CreateLike mocks base method.
func (m *MockStore) CreateLike(arg0 context.Context, arg1 db.CreateLikeParams) (db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", arg0, arg1)
	ret0, _ := ret[0].(db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockStoreMockRecorder) CreateLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockStore)(nil).CreateLike), arg0, arg1)
}

// CreateQuestion mocks base method.
func (m *MockStore) CreateQuestion(arg0 context.Context, arg1 db.CreateQuestionParams) (db.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestion", arg0, arg1)
	ret0, _ := ret[0].(db.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuestion indicates an expected call of CreateQuestion.
func (mr *MockStoreMockRecorder) CreateQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockStore)(nil).CreateQuestion), arg0, arg1)
}

// CreateQuestionCategory mocks base method.
func (m *MockStore) CreateQuestionCategory(arg0 context.Context, arg1 string) (db.QuestionCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestionCategory", arg0, arg1)
	ret0, _ := ret[0].(db.QuestionCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuestionCategory indicates an expected call of CreateQuestionCategory.
func (mr *MockStoreMockRecorder) CreateQuestionCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestionCategory", reflect.TypeOf((*MockStore)(nil).CreateQuestionCategory), arg0, arg1)
}

// CreateRelationship mocks base method.
func (m *MockStore) CreateRelationship(arg0 context.Context, arg1 db.CreateRelationshipParams) (db.Relationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelationship", arg0, arg1)
	ret0, _ := ret[0].(db.Relationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRelationship indicates an expected call of CreateRelationship.
func (mr *MockStoreMockRecorder) CreateRelationship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelationship", reflect.TypeOf((*MockStore)(nil).CreateRelationship), arg0, arg1)
}

// CreateReply mocks base method.
func (m *MockStore) CreateReply(arg0 context.Context, arg1 db.CreateReplyParams) (db.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReply", arg0, arg1)
	ret0, _ := ret[0].(db.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReply indicates an expected call of CreateReply.
func (mr *MockStoreMockRecorder) CreateReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReply", reflect.TypeOf((*MockStore)(nil).CreateReply), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserArticleRelationship mocks base method.
func (m *MockStore) CreateUserArticleRelationship(arg0 context.Context, arg1 db.CreateUserArticleRelationshipParams) (db.UserArticleRelationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserArticleRelationship", arg0, arg1)
	ret0, _ := ret[0].(db.UserArticleRelationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserArticleRelationship indicates an expected call of CreateUserArticleRelationship.
func (mr *MockStoreMockRecorder) CreateUserArticleRelationship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserArticleRelationship", reflect.TypeOf((*MockStore)(nil).CreateUserArticleRelationship), arg0, arg1)
}

// CreateUserQuestionRelation mocks base method.
func (m *MockStore) CreateUserQuestionRelation(arg0 context.Context, arg1 db.CreateUserQuestionRelationParams) (db.UserQuestionRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserQuestionRelation", arg0, arg1)
	ret0, _ := ret[0].(db.UserQuestionRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserQuestionRelation indicates an expected call of CreateUserQuestionRelation.
func (mr *MockStoreMockRecorder) CreateUserQuestionRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserQuestionRelation", reflect.TypeOf((*MockStore)(nil).CreateUserQuestionRelation), arg0, arg1)
}

// CreateVote mocks base method.
func (m *MockStore) CreateVote(arg0 context.Context, arg1 db.CreateVoteParams) (db.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVote", arg0, arg1)
	ret0, _ := ret[0].(db.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVote indicates an expected call of CreateVote.
func (mr *MockStoreMockRecorder) CreateVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockStore)(nil).CreateVote), arg0, arg1)
}

// DeleteAnswer mocks base method.
func (m *MockStore) DeleteAnswer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnswer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnswer indicates an expected call of DeleteAnswer.
func (mr *MockStoreMockRecorder) DeleteAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnswer", reflect.TypeOf((*MockStore)(nil).DeleteAnswer), arg0, arg1)
}

// DeleteArticle mocks base method.
func (m *MockStore) DeleteArticle(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockStoreMockRecorder) DeleteArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockStore)(nil).DeleteArticle), arg0, arg1)
}

// DeleteArticleCategory mocks base method.
func (m *MockStore) DeleteArticleCategory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticleCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticleCategory indicates an expected call of DeleteArticleCategory.
func (mr *MockStoreMockRecorder) DeleteArticleCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticleCategory", reflect.TypeOf((*MockStore)(nil).DeleteArticleCategory), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockStore) DeleteComment(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockStoreMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockStore)(nil).DeleteComment), arg0, arg1)
}

// DeleteLike mocks base method.
func (m *MockStore) DeleteLike(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockStoreMockRecorder) DeleteLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockStore)(nil).DeleteLike), arg0, arg1)
}

// DeleteQuestion mocks base method.
func (m *MockStore) DeleteQuestion(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockStoreMockRecorder) DeleteQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockStore)(nil).DeleteQuestion), arg0, arg1)
}

// DeleteQuestionCategory mocks base method.
func (m *MockStore) DeleteQuestionCategory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestionCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestionCategory indicates an expected call of DeleteQuestionCategory.
func (mr *MockStoreMockRecorder) DeleteQuestionCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestionCategory", reflect.TypeOf((*MockStore)(nil).DeleteQuestionCategory), arg0, arg1)
}

// DeleteRelationship mocks base method.
func (m *MockStore) DeleteRelationship(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelationship", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelationship indicates an expected call of DeleteRelationship.
func (mr *MockStoreMockRecorder) DeleteRelationship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationship", reflect.TypeOf((*MockStore)(nil).DeleteRelationship), arg0, arg1)
}

// DeleteReply mocks base method.
func (m *MockStore) DeleteReply(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReply indicates an expected call of DeleteReply.
func (mr *MockStoreMockRecorder) DeleteReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReply", reflect.TypeOf((*MockStore)(nil).DeleteReply), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserArticleRelationship mocks base method.
func (m *MockStore) DeleteUserArticleRelationship(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserArticleRelationship", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserArticleRelationship indicates an expected call of DeleteUserArticleRelationship.
func (mr *MockStoreMockRecorder) DeleteUserArticleRelationship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserArticleRelationship", reflect.TypeOf((*MockStore)(nil).DeleteUserArticleRelationship), arg0, arg1)
}

// DeleteUserQuestionRelation mocks base method.
func (m *MockStore) DeleteUserQuestionRelation(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserQuestionRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserQuestionRelation indicates an expected call of DeleteUserQuestionRelation.
func (mr *MockStoreMockRecorder) DeleteUserQuestionRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserQuestionRelation", reflect.TypeOf((*MockStore)(nil).DeleteUserQuestionRelation), arg0, arg1)
}

// DeleteVote mocks base method.
func (m *MockStore) DeleteVote(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVote indicates an expected call of DeleteVote.
func (mr *MockStoreMockRecorder) DeleteVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVote", reflect.TypeOf((*MockStore)(nil).DeleteVote), arg0, arg1)
}

// GetAnswer mocks base method.
func (m *MockStore) GetAnswer(arg0 context.Context, arg1 int64) (db.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswer", arg0, arg1)
	ret0, _ := ret[0].(db.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswer indicates an expected call of GetAnswer.
func (mr *MockStoreMockRecorder) GetAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswer", reflect.TypeOf((*MockStore)(nil).GetAnswer), arg0, arg1)
}

// GetArticle mocks base method.
func (m *MockStore) GetArticle(arg0 context.Context, arg1 int64) (db.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", arg0, arg1)
	ret0, _ := ret[0].(db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockStoreMockRecorder) GetArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockStore)(nil).GetArticle), arg0, arg1)
}

// GetArticleCategory mocks base method.
func (m *MockStore) GetArticleCategory(arg0 context.Context, arg1 int64) (db.ArticleCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleCategory", arg0, arg1)
	ret0, _ := ret[0].(db.ArticleCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleCategory indicates an expected call of GetArticleCategory.
func (mr *MockStoreMockRecorder) GetArticleCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleCategory", reflect.TypeOf((*MockStore)(nil).GetArticleCategory), arg0, arg1)
}

// GetComment mocks base method.
func (m *MockStore) GetComment(arg0 context.Context, arg1 int64) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockStoreMockRecorder) GetComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockStore)(nil).GetComment), arg0, arg1)
}

// GetLikes mocks base method.
func (m *MockStore) GetLikes(arg0 context.Context, arg1 int32) ([]db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikes", arg0, arg1)
	ret0, _ := ret[0].([]db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikes indicates an expected call of GetLikes.
func (mr *MockStoreMockRecorder) GetLikes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikes", reflect.TypeOf((*MockStore)(nil).GetLikes), arg0, arg1)
}

// GetQuestion mocks base method.
func (m *MockStore) GetQuestion(arg0 context.Context, arg1 int64) (db.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestion", arg0, arg1)
	ret0, _ := ret[0].(db.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestion indicates an expected call of GetQuestion.
func (mr *MockStoreMockRecorder) GetQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestion", reflect.TypeOf((*MockStore)(nil).GetQuestion), arg0, arg1)
}

// GetQuestionCategory mocks base method.
func (m *MockStore) GetQuestionCategory(arg0 context.Context, arg1 int64) (db.QuestionCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionCategory", arg0, arg1)
	ret0, _ := ret[0].(db.QuestionCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionCategory indicates an expected call of GetQuestionCategory.
func (mr *MockStoreMockRecorder) GetQuestionCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionCategory", reflect.TypeOf((*MockStore)(nil).GetQuestionCategory), arg0, arg1)
}

// GetReply mocks base method.
func (m *MockStore) GetReply(arg0 context.Context, arg1 int64) (db.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReply", arg0, arg1)
	ret0, _ := ret[0].(db.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReply indicates an expected call of GetReply.
func (mr *MockStoreMockRecorder) GetReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReply", reflect.TypeOf((*MockStore)(nil).GetReply), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetVotes mocks base method.
func (m *MockStore) GetVotes(arg0 context.Context, arg1 int32) ([]db.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotes", arg0, arg1)
	ret0, _ := ret[0].([]db.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotes indicates an expected call of GetVotes.
func (mr *MockStoreMockRecorder) GetVotes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotes", reflect.TypeOf((*MockStore)(nil).GetVotes), arg0, arg1)
}

// ListAnswers mocks base method.
func (m *MockStore) ListAnswers(arg0 context.Context, arg1 db.ListAnswersParams) ([]db.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnswers", arg0, arg1)
	ret0, _ := ret[0].([]db.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnswers indicates an expected call of ListAnswers.
func (mr *MockStoreMockRecorder) ListAnswers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswers", reflect.TypeOf((*MockStore)(nil).ListAnswers), arg0, arg1)
}

// ListArticleCategories mocks base method.
func (m *MockStore) ListArticleCategories(arg0 context.Context, arg1 db.ListArticleCategoriesParams) ([]db.ArticleCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticleCategories", arg0, arg1)
	ret0, _ := ret[0].([]db.ArticleCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticleCategories indicates an expected call of ListArticleCategories.
func (mr *MockStoreMockRecorder) ListArticleCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticleCategories", reflect.TypeOf((*MockStore)(nil).ListArticleCategories), arg0, arg1)
}

// ListArticles mocks base method.
func (m *MockStore) ListArticles(arg0 context.Context, arg1 db.ListArticlesParams) ([]db.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticles", arg0, arg1)
	ret0, _ := ret[0].([]db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticles indicates an expected call of ListArticles.
func (mr *MockStoreMockRecorder) ListArticles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticles", reflect.TypeOf((*MockStore)(nil).ListArticles), arg0, arg1)
}

// ListComments mocks base method.
func (m *MockStore) ListComments(arg0 context.Context, arg1 db.ListCommentsParams) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", arg0, arg1)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComments indicates an expected call of ListComments.
func (mr *MockStoreMockRecorder) ListComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockStore)(nil).ListComments), arg0, arg1)
}

// ListQuestionCategories mocks base method.
func (m *MockStore) ListQuestionCategories(arg0 context.Context, arg1 db.ListQuestionCategoriesParams) ([]db.QuestionCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuestionCategories", arg0, arg1)
	ret0, _ := ret[0].([]db.QuestionCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuestionCategories indicates an expected call of ListQuestionCategories.
func (mr *MockStoreMockRecorder) ListQuestionCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestionCategories", reflect.TypeOf((*MockStore)(nil).ListQuestionCategories), arg0, arg1)
}

// ListQuestions mocks base method.
func (m *MockStore) ListQuestions(arg0 context.Context, arg1 db.ListQuestionsParams) ([]db.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuestions", arg0, arg1)
	ret0, _ := ret[0].([]db.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuestions indicates an expected call of ListQuestions.
func (mr *MockStoreMockRecorder) ListQuestions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestions", reflect.TypeOf((*MockStore)(nil).ListQuestions), arg0, arg1)
}

// ListReplies mocks base method.
func (m *MockStore) ListReplies(arg0 context.Context, arg1 db.ListRepliesParams) ([]db.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReplies", arg0, arg1)
	ret0, _ := ret[0].([]db.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReplies indicates an expected call of ListReplies.
func (mr *MockStoreMockRecorder) ListReplies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplies", reflect.TypeOf((*MockStore)(nil).ListReplies), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// RelationshipTx mocks base method.
func (m *MockStore) RelationshipTx(arg0 context.Context, arg1 db.RelationshipTxParams) (db.RelationshipTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationshipTx", arg0, arg1)
	ret0, _ := ret[0].(db.RelationshipTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationshipTx indicates an expected call of RelationshipTx.
func (mr *MockStoreMockRecorder) RelationshipTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationshipTx", reflect.TypeOf((*MockStore)(nil).RelationshipTx), arg0, arg1)
}

// UpdateAnswer mocks base method.
func (m *MockStore) UpdateAnswer(arg0 context.Context, arg1 db.UpdateAnswerParams) (db.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnswer", arg0, arg1)
	ret0, _ := ret[0].(db.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnswer indicates an expected call of UpdateAnswer.
func (mr *MockStoreMockRecorder) UpdateAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswer", reflect.TypeOf((*MockStore)(nil).UpdateAnswer), arg0, arg1)
}

// UpdateArticleCategory mocks base method.
func (m *MockStore) UpdateArticleCategory(arg0 context.Context, arg1 db.UpdateArticleCategoryParams) (db.ArticleCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleCategory", arg0, arg1)
	ret0, _ := ret[0].(db.ArticleCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleCategory indicates an expected call of UpdateArticleCategory.
func (mr *MockStoreMockRecorder) UpdateArticleCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleCategory", reflect.TypeOf((*MockStore)(nil).UpdateArticleCategory), arg0, arg1)
}

// UpdateComment mocks base method.
func (m *MockStore) UpdateComment(arg0 context.Context, arg1 db.UpdateCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockStoreMockRecorder) UpdateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockStore)(nil).UpdateComment), arg0, arg1)
}

// UpdateQuestion mocks base method.
func (m *MockStore) UpdateQuestion(arg0 context.Context, arg1 db.UpdateQuestionParams) (db.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", arg0, arg1)
	ret0, _ := ret[0].(db.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockStoreMockRecorder) UpdateQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockStore)(nil).UpdateQuestion), arg0, arg1)
}

// UpdateQuestionCategory mocks base method.
func (m *MockStore) UpdateQuestionCategory(arg0 context.Context, arg1 db.UpdateQuestionCategoryParams) (db.QuestionCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestionCategory", arg0, arg1)
	ret0, _ := ret[0].(db.QuestionCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuestionCategory indicates an expected call of UpdateQuestionCategory.
func (mr *MockStoreMockRecorder) UpdateQuestionCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestionCategory", reflect.TypeOf((*MockStore)(nil).UpdateQuestionCategory), arg0, arg1)
}

// UpdateReply mocks base method.
func (m *MockStore) UpdateReply(arg0 context.Context, arg1 db.UpdateReplyParams) (db.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReply", arg0, arg1)
	ret0, _ := ret[0].(db.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReply indicates an expected call of UpdateReply.
func (mr *MockStoreMockRecorder) UpdateReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReply", reflect.TypeOf((*MockStore)(nil).UpdateReply), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
