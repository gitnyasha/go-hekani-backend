// Code generated by sqlc. DO NOT EDIT.
// source: vote.sql

package db

import (
	"context"
)

const createVote = `-- name: CreateVote :one
INSERT INTO votes (
  user_id, answer_id
) VALUES (
  $1, $2
)
RETURNING id, user_id, answer_id, created_at, updated_at
`

type CreateVoteParams struct {
	UserID   int32 `json:"user_id"`
	AnswerID int32 `json:"answer_id"`
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, createVote, arg.UserID, arg.AnswerID)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AnswerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVote = `-- name: DeleteVote :exec
DELETE FROM votes
WHERE id = $1
`

func (q *Queries) DeleteVote(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteVote, id)
	return err
}

const getVotes = `-- name: GetVotes :many
SELECT id, user_id, answer_id, created_at, updated_at FROM votes
WHERE answer_id = $1
`

func (q *Queries) GetVotes(ctx context.Context, answerID int32) ([]Vote, error) {
	rows, err := q.db.QueryContext(ctx, getVotes, answerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vote
	for rows.Next() {
		var i Vote
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AnswerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
