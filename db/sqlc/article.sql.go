// Code generated by sqlc. DO NOT EDIT.
// source: article.sql

package db

import (
	"context"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO Articles (
  title, link, image, article_category_id, user_id
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, title, link, image, created_at, updated_at, article_category_id, user_id
`

type CreateArticleParams struct {
	Title             string `json:"title"`
	Link              string `json:"link"`
	Image             string `json:"image"`
	ArticleCategoryID int32  `json:"article_category_id"`
	UserID            int32  `json:"user_id"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle,
		arg.Title,
		arg.Link,
		arg.Image,
		arg.ArticleCategoryID,
		arg.UserID,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Link,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ArticleCategoryID,
		&i.UserID,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles
WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT id, title, link, image, created_at, updated_at, article_category_id, user_id FROM articles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArticle(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Link,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ArticleCategoryID,
		&i.UserID,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT id, title, link, image, created_at, updated_at, article_category_id, user_id FROM articles
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListArticlesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListArticles(ctx context.Context, arg ListArticlesParams) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, listArticles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Link,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ArticleCategoryID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
