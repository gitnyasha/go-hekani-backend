// Code generated by sqlc. DO NOT EDIT.
// source: question.sql

package db

import (
	"context"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (
  title, user_id, question_category_id
) VALUES (
  $1, $2, $3
)
RETURNING id, title, created_at, updated_at, user_id, question_category_id
`

type CreateQuestionParams struct {
	Title              string `json:"title"`
	UserID             int32  `json:"user_id"`
	QuestionCategoryID int32  `json:"question_category_id"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion, arg.Title, arg.UserID, arg.QuestionCategoryID)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.QuestionCategoryID,
	)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions
WHERE id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteQuestion, id)
	return err
}

const getQuestion = `-- name: GetQuestion :one
SELECT id, title, created_at, updated_at, user_id, question_category_id FROM questions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetQuestion(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.QuestionCategoryID,
	)
	return i, err
}

const listQuestions = `-- name: ListQuestions :many
SELECT id, title, created_at, updated_at, user_id, question_category_id FROM questions
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListQuestionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListQuestions(ctx context.Context, arg ListQuestionsParams) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.QuestionCategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions
SET title = $1, updated_at = NOW()
WHERE id = $2
RETURNING id, title, created_at, updated_at, user_id, question_category_id
`

type UpdateQuestionParams struct {
	Title string `json:"title"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, updateQuestion, arg.Title, arg.ID)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.QuestionCategoryID,
	)
	return i, err
}
