// Code generated by sqlc. DO NOT EDIT.
// source: comment.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  user_id, answer_id, title
) VALUES (
  $1, $2, $3
)
RETURNING id, title, user_id, answer_id, created_at, updated_at
`

type CreateCommentParams struct {
	UserID   int32  `json:"user_id"`
	AnswerID int32  `json:"answer_id"`
	Title    string `json:"title"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.UserID, arg.AnswerID, arg.Title)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.AnswerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, title, user_id, answer_id, created_at, updated_at FROM comments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.AnswerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listComments = `-- name: ListComments :many
SELECT id, title, user_id, answer_id, created_at, updated_at FROM comments
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCommentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListComments(ctx context.Context, arg ListCommentsParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listComments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.AnswerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET title = $1, updated_at = NOW()
WHERE id = $2
RETURNING id, title, user_id, answer_id, created_at, updated_at
`

type UpdateCommentParams struct {
	Title string `json:"title"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.Title, arg.ID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.AnswerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
